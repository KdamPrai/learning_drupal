<?php

/*
 * Implement hook help to provide help description for zregistration custom
 * module.
 */
function zregistration_help($path, $arg){
  switch ($path) {
    case "admin/help#zregistration":
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Z Registration is a module to understand about registration process.') . '</p>';
      return $output;
      break; 
  }
}

/*
 * Implement hook menu to customize quick access menu to module feature
 */
function zregistration_menu() {
    $items = array();
    
    $items['registration'] = array(
        'title' => 'Registered Users',
        'page callback' => 'zregistration_reg_page',
        'access arguments' => array('administer'),
    );
    
    return $items;
}

/*
 * Page callback function to see registered users
 */
function zregistration_reg_page(){
    $query = db_select('users_roles', 'ur')
            ->fields('ur', array('uid'))
            ->condition('rid', 5, '=')
            ->execute()
            ->fetchCol();

    $records = user_load_multiple($query);
    
    $header = array(
        array('data' => 'Username', 'field' => 'username'),
        'status' => 'Status',
        'operations' => 'Operations',
    );
    
    $space = str_repeat('&nbsp', 2);
    $rows = array();
    foreach($records as $user) {
        $status = $user->status;
        if ($status == 1) {
            $str_status = 'active';
        } else {
            $str_status = 'blocked';
        }
        $rows[$user->uid] = array(
            'username' => l($user->name, 'user/' . $user->uid),
            'status' => $str_status,
            'operations' =>l('main profile', 'profile-main/' . $user->uid) . $space . l('student profile', 'profile-student_profile/' . $user->uid),
        );
    }
    
    $out = theme('table', array('header' => $header, 'rows' => $rows, 'caption' => l('Add student', 'admin/people/create')));
    
    return $out;
}

/*
 * alter form to validate registration courses
 */
function zregistration_form_alter(&$form, &$form_state, $form_id){
    if($form_id == 'profile2_edit_student_profile_form'){
        $form['profile_student_profile']
                ['field_registration']['und'][0]['field_reg_courses']['und']
                ['#element_validate'][] = 'zregistration_courses_validate';
    }
}

/*
 * This function validate semester in academic year and also registration courses.
 */
function zregistration_courses_validate($form, &$form_state){
    // get registration info section
    $registration_sets = $form_state['input']['profile_student_profile']['field_registration']['und'];
    // check if more than 1 registration set (semester)
    if (sizeof($registration_sets) > 1){
        // variable to store all intersect courses ID
        $intersect = array();
        // variable to store all courses on iteration
        $combine_array = array();
        // variable to store all courses error msg
        $courses_error_msg = '';
        // variable to store both academic year and semester
        $acad_ym = array();
        // loop through registration info set
        foreach ($registration_sets as $info) {
            // make an array of both academic year and semester
            $a = array(0 => $info['field_reg_academic_year']['und'], 1 => $info['field_reg_semester']['und']);
            // if that array is in our all year-semester array or not
            if (!in_array($a, $acad_ym)){
                // if no, put it in main array
                array_push($acad_ym, $a);
            } else {
                // if yes, alert error
                form_set_error('acad_year_semester_error', 'You cannot register to same year and same semester.');
            }
            
            // get course ID
            $course_id = $info['field_reg_courses']['und'];
            // if the big array that store course ID is empty
            if (empty($combine_array)) {
                // put the first one to it
                $combine_array = $course_id;
            } else {
                // compare the main array and course id, and put the intersect course to intersect array
                $intersect += array_intersect($combine_array, $course_id);
                $combine_array = array_merge($combine_array, $course_id);
            }
        }
        
        // if there is at least 1 course ID intersect, alert msg with course name
        if (sizeof($intersect) > 0){
            $courses_name = taxonomy_term_load_multiple($intersect);
            foreach($courses_name as $name){
                $courses_error_msg .= $name->name . ' is already taken in previous semester.<br>';
            }
            form_set_error('retake_courses_error', $courses_error_msg);
        }
    }
}