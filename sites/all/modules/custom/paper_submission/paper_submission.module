<?php

function paper_submission_help($path, $arg) {
  switch ($path) {
    case "admin/help#paper_submission":
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Paper Submission is a helper module of paper submission form.') . '</p>';
      return $output;
      break; 
  }
}

function paper_submission_menu() {
  $items = array();
  
  $items['admin/config/content/paper_submission_set_paper_email'] = array(
    'title' => 'Email Content (Paper)',
    'description' => 'Set Email Content for Paper Submission',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('paper_submission_set_paper_email_form'),
    'access arguments' => array('access email setting'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['admin/config/content/paper_submission_set_account_email'] = array(
    'title' => 'Email Content (Account)',
    'description' => 'Set Email Content for Account Creation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('paper_submission_set_account_email_form'),
    'access arguments' => array('access email setting'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['paper_list'] = array(
    'title' => 'List of paper',
    'page callback' => array('paper_submission_list'),
    'access arguments' => array('access paper list'),
  );
  
  return $items;
}

function paper_submission_permission() {
  return array(
    'access email setting' => array(
      'title' => t('Access Email Setting for Paper Submission module'),
    ),
    'access paper list' => array(
      'title' => t('Access list of participants paper'),
    ),
  );
}

function paper_submission_set_paper_email_form($form, &$form_state){
  $form['sender_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Set Sender Name'),
    '#default_value' => variable_get('sender_name'),
    '#required' => TRUE,
  );
  
  $form['sender_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Set Sender Email'),
    '#default_value' => variable_get('sender_email'),
    '#required' => TRUE,
  );
  
  $form['paper_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Set Email Subject for Paper Submission'),
    '#default_value' => variable_get('paper_subject', 'Paper Accepted'),
    '#required' => TRUE,
  );
  
  $form['paper_email'] = array(
    '#type' => 'textarea',
    '#title' => t('Set Email Content for Paper Submission'),
    '#default_value' => variable_get('paper_email'),
    '#resizable' => FALSE,
    '#required' => TRUE,
  );
  
  return system_settings_form($form);
}

function paper_submission_set_paper_email_form_validate($form, &$form_state){
  if (!valid_email_address($form_state['values']['sender_email'])) {
    form_set_error('sender_email', t('You must enter a valid e-mail address.'));
  }
}

function paper_submission_set_account_email_form($form, &$form_state){
  $form['sender_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Set Sender Name'),
    '#default_value' => variable_get('sender_name'),
    '#required' => TRUE,
  );
  
  $form['sender_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Set Sender Email'),
    '#default_value' => variable_get('sender_email'),
    '#required' => TRUE,
  );
  
  $form['account_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Set Email Subject for Account Creation'),
    '#default_value' => variable_get('account_subject', 'Account Created'),
    '#required' => TRUE,
  );
  
  $form['account_email'] = array(
    '#type' => 'textarea',
    '#title' => t('Set Email Content for Account Creation'),
    '#default_value' => variable_get('account_email'),
    '#resizable' => FALSE,
    '#required' => TRUE,
  );
  
  return system_settings_form($form);
}

function paper_submission_set_account_email_form_validate($form, &$form_state){
  if (!valid_email_address($form_state['values']['sender_email'])) {
    form_set_error('sender_email', t('You must enter a valid e-mail address.'));
  }
}

function paper_submission_form_alter(&$form, &$form_state, $form_id){
  if ($form_id == 'paper_submission_node_form') {
    drupal_set_title('Paper Submission');
    $selected = isset($form_state['values']['field_conference_place_date']['und']) ? $form_state['values']['field_conference_place_date']['und'] : key(ajax_get_conference_options());
    $form['field_conference_place_date']['und']['#options'] = ajax_get_conference_options();
    $form['field_conference_place_date']['und']['#ajax'] = array(
      'callback' => 'ajax_get_conference_callback',
      'wrapper' => 'conference-div',
      'method' => 'replace',
    );
    $opt = ajax_get_conference_name_options($selected);
//    if (empty($opt)){
//      $opt = $form['field_select_conference']['und']['#options'];
//      $form['field_select_conference'] = array(
//      '#type' => 'value',
//        '#value' => 0,
//      '#prefix' => '<div id="conference-div">',
//      '#suffix' => '</div>',
//      );
//    } else {
      $form['field_select_conference']['und']['#prefix'] = '<div id="conference-div">';
      $form['field_select_conference']['und']['#suffix'] = '</div>';
      $form['field_select_conference']['und']['#options'] = $opt;
//    }
    
    $form['field_position_title']['und']['#options']['_none'] = t('- Title -');
    $form['field_country']['und']['#options']['_none'] = t('- Country -');
    $form['#submit'][] = 'paper_submission_form_submit';
  }
}

function ajax_get_conference_options(){
  $sql = 'SELECT cd.`field_conference_dates_value` as `conf_date`, 
      v.`field_venue_country`, v.`field_venue_locality`, 
      d.`entity_id` AS `conf_id`
      FROM `field_data_field_conference_dates` cd
      JOIN `field_data_field_important_date` d
      JOIN `field_data_field_venue` v
      ON d.`entity_id` = v.`entity_id`
      AND d.`field_important_date_value` = cd.`entity_id`';
  $results = db_query($sql) -> fetchAll();
  $date_venue = array('_none' => '- Select -');
  foreach($results as $result){
    $date = date_format(date_create($result->conf_date), 'F d, Y');
    $venue = $result->field_venue_locality . ', ' . location_country_name($result->field_venue_country);
    $date_venue[$result->conf_id] = $date . ' - ' . $venue;
  }
  $con_pd = array_unique($date_venue);
  return !empty($results) ? $con_pd : array();
}

function ajax_get_conference_name_options($selected_pd){
  $conf_name = array('_none' => '- Select -');
  if ($selected_pd != '_none' && $selected_pd[0]['target_id'] != ''){
    $select_opt = $selected_pd[0]['target_id'];
    $node = node_load($select_opt);
    $important_date = $node->field_important_date;
    $dates_collection = field_collection_item_load($important_date['und'][0]['value']);
    $conference_date = $dates_collection->field_conference_dates['und'][0]['value'];
    
    $venue = $node->field_venue['und'][0];
    $country = $venue['country'];
    $locality = $venue['locality'];
    
    $conf_name += get_conference_title_by_date_and_place($conference_date, $country, $locality);
    
  }
  return $conf_name;
}

function get_conference_title_by_date_and_place($date, $country, $locality){
  $sql = 'SELECT n.`title`
    FROM `node` n
    JOIN `field_data_field_venue` v
    JOIN `field_data_field_important_date` idate
    JOIN `field_data_field_conference_dates` cdate
    ON v.`field_venue_country` = \'' . $country . '\'
    AND v.`field_venue_locality` = \'' . $locality . '\'
    AND cdate.`field_conference_dates_value` = \'' . $date . '\'
    AND cdate.`entity_id` = idate.`field_important_date_value`
    AND idate.`entity_id` = v.`entity_id`
    AND n.`nid` = idate.`entity_id`';
  $results = db_query($sql) -> fetchCol();
  return $results;
}

function ajax_get_conference_callback($form, &$form_state){
  
  return array(
        '#type' => 'ajax',
        '#commands' => array(
            ajax_command_replace("#conference-div", render($form['field_select_conference']['und'])),
        )
    );
}

function paper_submission_form_submit($form, &$form_state){
  $mail = $form_state['values']['field_author_s_email']['und'][0]['email'];
  $q = db_query("SELECT `users`.`uid` FROM `users` WHERE `users`.`mail` = '" . $mail . "'");
  if ($q->rowCount() > 0){
    $uid = $q -> fetchCol();
    $form_state['values']['uid'] = $uid;
  } elseif ($q->rowCount() == 0) {
    // create user here
    $new_user = array(
      'name' => $mail,
      'pass' => '12345678', //user_password(8),
      'mail' => $mail,
      'status' => 1,
      'init' => $mail,
      'roles' => array(
        DRUPAL_AUTHENTICATED_RID => 'authenticated user',
        21 => 'participant',
      ),
    );
    $user = user_save('', $new_user);
    $uid = $user->uid;

    variable_set('uid', $uid);
    variable_set('mail', $new_user['mail']);
    variable_set('pass', $new_user['pass']);
    
    // send email about account
    $to = array(
      $new_user['mail'],
    );
    $cc = array();
    $bcc = array();
    $sub = 'Account';
    $msg = $new_user['pass'];
//    send_email(variable_get('sender_name'), variable_get('sender_email'), $to, $cc, $bcc, $sub, $msg);
  }
}

function paper_submission_node_presave($node){
  // process thing before save content type
  $uid = variable_get('uid');
  $node->uid = $uid;
}

function paper_submission_node_insert($node){
  // send notify email to participant about received paper
}

function paper_submission_list(){
  global $user;
  $uid = $user->uid;
  
  $p_sql = 'SELECT n.`title`, c.`field_select_conference_target_id` as `conf` '
      . 'FROM `node` n '
      . 'JOIN `field_data_field_select_conference` c '
      . 'ON c.`entity_id` = n.`nid` AND n.uid = ' . $uid;
  
  $p_result = db_query($p_sql) -> fetchAll();
  
  $header = array(
    'paper' => 'Paper Title',
    'conf' => 'Applied Conference',
  );
  
  $rows = array();
  
  foreach ($p_result as $paper){
    $c_sql = 'SELECT n.`title` FROM `node` n WHERE n.nid = ' . $paper->conf;
    $c_result = db_query($c_sql) -> fetchCol();
    $rows[] = array(
      'paper' => $paper->title,
      'conf' => $c_result[0],
    );
  }
  
  $out = theme('table', array('header' => $header, 'rows' => $rows, 'empty' => 'No paper applied'));
  
  return $out;
}