<?php

/**
 * @file
 * A block module that displays recent blog and forum posts.
 */

/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */
function current_posts_help($path, $arg){
  switch ($path) {
    case "admin/help#current_posts":
      return t("Displays links to nodes created on this date"); 
      break; 
  }
}

/**
 * Implements hook_menu().
 */
function current_posts_menu() {
  $items = array();

  $items['admin/config/content/current_posts'] = array(
    'title' => 'Current posts',
    'description' => 'Configuration for Current posts module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('current_posts_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['current_posts'] = array(
    'title' => 'Current posts page',
    'page callback' => 'current_posts_page',
    'access arguments' => array('access content'),
  );
  
  $items['current_posts/form'] = array(
    'title' => 'Current posts form',
    'description' => 'A form to mess around with.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('current_posts_page_form'),
    'access arguments' => array('access content'),
    'access callback' => TRUE,
  );
  
  $items['results/%'] = array(
      'title' => 'Form Result',
      'page callback' => 'current_posts_results_page',
      'page arguments' => array(1),
      'access callback' => true,
  );
  
  $items['reg_form'] = array(
    'title' => 'Application Form',
    'description' => 'Entrance Exam Application Form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('current_posts_reg_form'),
    'access arguments' => array('access content'),
    'access callback' => TRUE,
  );
  
  $items['applicant_info/%'] = array(
    'title' => 'Applicant Info',
    'page callback' => 'current_posts_applicant_info_page',
    'page arguments' => array(1),
    'access callback' => true,
  );
  
  $items['dept_form'] = array(
      'title' => 'Add new department',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('current_posts_dept_form'),
      'access arguments' => array('administer'),
      
  );
  
  $items['update_application_form'] = array(
      'title' => 'Update Application Form',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('current_posts_update_application_form'),
      'access arguments' => array('administer'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function current_posts_permission() {
  return array(
    'access current_posts content' => array(
      'title' => t('Access content for the Current posts module'),
    )
  );
}

/**
 * Custom content function. 
 * 
 * Set beginning and end dates, retrieve posts from database
 * saved in that time period.
 * 
 * @return 
 *   A result set of the targeted posts.
 */
function current_posts_contents(){
  //Get today's date.
  $today = getdate();
  //Calculate the date a week ago.
  $start_time = mktime(0, 0, 0,$today['mon'],($today['mday'] - 7), $today['year']);
  //Get all posts from one week ago to the present.
  $end_time = time();
  
  $max_num = variable_get('current_posts_max', 3);

//Use Database API to retrieve current posts.
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title', 'created'))
    ->condition('status', 1) //Published.
    ->condition('created', array($start_time, $end_time), 'BETWEEN')
    ->orderBy('created', 'DESC') //Most recent first.
    ->range(0, $max_num)
    ->execute(); 
  return $query;  
}

/**
 * Implements hook_block_info().
 */
function current_posts_block_info() {
  $blocks['current_posts'] = array(
    // The name that will appear in the block list.
    'info' => t('Current posts'),
    // Default setting.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 * 
 * Prepares the contents of the block.
 */
function current_posts_block_view($delta = '') {
  switch ($delta) {
    case 'current_posts':
      $block['subject'] = t('Current posts');
      if (user_access('access content')) {
        // Use our custom function to retrieve data.
        $result = current_posts_contents();
        // Array to contain items for the block to render.
        $items = array();
        // Iterate over the resultset and format as links.
        foreach ($result as $node) {
          $items[] = array(
            'data' => l($node->title, 'node/' . $node->nid),
          ); 
        }
       // No content in the last week.
        if (empty($items)) {
          $block['content'] = t('No posts available.');  
        } 
        else {
          // Pass data through theme function.
          $block['content'] = theme('item_list', array(
            'items' => $items));
        }
      }
    return $block;
  }
  
}

/**
 * Page callback: Current posts settings
 *
 * @see current_posts_menu()
 */
function current_posts_form($form, &$form_state) {
  $form['current_posts_max'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of posts'),
    '#default_value' => variable_get('current_posts_max', 3),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t('The maximum number of links to display in the block.'),
    '#required' => true,
  );

  return system_settings_form($form);
}

/**
 * Implements validation from the Form API.
 * 
 * @param $form
 *   A structured array containing the elements and properties of the form.
 * @param $form_state
 *   An array that stores information about the form's current state 
 *   during processing.
 */
function current_posts_form_validate($form, &$form_state){
  $max_num = $form_state['values']['current_posts_max'];
  if (!is_numeric($max_num)){
    form_set_error('current_posts_max', t('You must enter a number for the maximum number of posts to display.'));
  }
  elseif ($max_num <= 0){
    form_set_error('current_posts_max', t('Maximum number of posts to display must be positive.'));
  }
}

/**
 * Page callback for /current_posts.
 */
function current_posts_page() {
  return t('Page Content');
}

/**
 * Page callback for /current_posts/form.
 */
function current_posts_page_form($form, &$form_state){
    if (empty($form_state['values']['current_posts_num'])){
        $type = array(0 => t('Instuctor'), 1 => t('Student'), 2 => t('Other'));
        
        $form['user_type'] = array(
          '#type' => 'radios',
          '#title' => t('User type'),
          '#default_value' => isset($node->type) ? $node->type : 0,
          '#options' => $type,
          '#description' => t('Select your position.'),
        );
        
        $form['current_posts_num'] = array(
            '#type' => 'textfield',
            '#title' => t('Maximum number of posts'),
            '#placeholder' => t('Enter number of posts'),
            '#description' => t('The maximum number of links to display in the block.'),
            '#required' => true,
        );
    
        $form['submit_button'] = array(
            '#type' => 'submit',
            '#value' => t('Click Here!'),
        );
    } else {
        $posts_num = $form_state['values']['current_posts_num'];
        $temp = '';
        for ($i = 0; $i < $posts_num; $i++) {
            $temp = $temp . 'Post index: ' . $i . '<br>';
        }
        
        $u_type_num = $form_state['values']['user_type'];
        $u_type = '';
        switch ($u_type_num) {
            case 0:
                $u_type = 'Your position is: Instuctor. <br>';
                break;
            case 1:
                $u_type = 'Your position is: Student. <br>';
                break;
            case 2:
                $u_type = 'Your position is: Other. <br>';
                break;
        }
        
        $form['submission'] = array(
            '#markup' => $u_type . $temp . t('You set max number of posts is: ' . $posts_num),
        );
    }
  
  return $form;
}

function current_posts_page_form_validate($form, &$form_state){
    $in = $form_state['values']['current_posts_num'];
    if (!is_numeric($in)){
        form_set_error('current_posts_num', t('Amount of posts to show must be number.'));
    } elseif ($in >= 100) {
        form_set_error('current_posts_num', t('Too much posts.'));
    } elseif ($in <=0) {
        form_set_error('current_posts_num', t('Number of posts must be positive.'));
    }
}

function current_posts_page_form_submit($form, &$form_state){
//    $form_state['rebuild'] = TRUE;
    $form_state['redirect'] = 'results/' . $form_state['values']['current_posts_num'] . '/' . $form_state['values']['user_type'];
}

function current_posts_results_page($var1, $var2) {
    $temp = '';
    for ($i = 0; $i < $var1; $i++) {
        $temp = $temp . 'Post index: ' . $i . '<br>';
    }
    
//    $u_type_num = $form_state['values']['user_type'];
    $u_type = '';
    switch ($var2) { 
        case 0:
            $u_type = 'Your position is: Instuctor. <br>';
            break;
        case 1:
            $u_type = 'Your position is: Student. <br>';
            break;
        case 2:
            $u_type = 'Your position is: Other. <br>';
            break;
    }
        
    $dis = array(
        '#markup' => $u_type . $temp . t('You set max number of posts is: ' . $var1),
    );
    
    return $dis;
//    return t('You set max number of posts is: ' . $var1);
}

/*
 * Example form: Registration application form
 */
function current_posts_reg_form($form, &$form_state){
    if (!isset($_SESSION['u_info']) || empty($_SESSION['u_info'])){
        $nid = 0;
        $fname = '';
        $name = '';
        $gender = 0;
        $dob = array('month' => 1, 'day' => 1, 'year' => 2000);
        $pob = '';
        $adr = '';
        $phone = '';
        $acad_year = '';
        $semester = 1;
        $major = 1;
    } elseif (isset($_SESSION['u_info'])) {
        $nid = $_SESSION['u_info']['nid'];
        $fname = $_SESSION['u_info']['family_name'];
        $name = $_SESSION['u_info']['name'];
        $gender = $_SESSION['u_info']['gender'];
        $dob = array('month' => $_SESSION['u_info']['bmonth'],
            'day' => $_SESSION['u_info']['bday'],
            'year' => $_SESSION['u_info']['byear']);
        $pob = $_SESSION['u_info']['pob'];
        $adr = $_SESSION['u_info']['address'];
        $phone = $_SESSION['u_info']['phone'];
        $acad_year = $_SESSION['u_info']['acad_year'];
        $semester = $_SESSION['u_info']['semester'];
        $major = $_SESSION['u_info']['major_id'];
        unset($_SESSION['u_info']);
    }
    
//    debug(!isset($_SESSION['u_info']) || empty($_SESSION['u_info']));
    $pref1 = array();
    $query = db_query("SELECT `nid`, `name`, `code` FROM `major`");
    $records = $query->fetchAll();
    foreach ($records as $record) {
        $pref1[$record->nid] = $record->name . ' (' . $record->code . ')';
    }
    
    $form['major'] = array(
        '#type' => 'value',
        '#value' => $pref1,
    );
    
    $form['nid'] = array(
        '#type' => 'hidden',
        '#value' => $nid,
    );
    
    $form['sect_1'] = array(
        '#type' => 'fieldset', 
        '#title' => t('Section 1 - Applicant\'s Personal Details'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
    );
    
    $form['sect_1']['reg_family_name'] = array(
        '#type' => 'textfield',
        '#title' => 'Family Name',
        '#default_value' => $fname,
        '#required' => true,
    );
    
    $form['sect_1']['reg_name'] = array(
        '#type' => 'textfield',
        '#title' => 'Name',
        '#default_value' => $name,
        '#required' => true,
    );
    
    $form['sect_1']['gender'] = array(
       '#type' => 'select',
       '#title' => t('Gender'),
       '#options' => array(
           0 => t('Female'),
           1 => t('Male'),
       ),
        '#default_value' => $gender,
       '#required' => true,
    );
    
    $form['sect_1']['dob'] = array(
        '#type' => 'date',
        '#title' => 'Date of Birth',
        '#default_value' => $dob,
        '#required' => true,
    );
    
    $form['sect_1']['pob'] = array(
        '#type' => 'textarea',
        '#title' => t('Place of Birth'),
        '#default_value' => $pob,
        '#resizable' => FALSE,
        '#required' => true,
    );
    
    $form['sect_1']['address'] = array(
        '#type' => 'textfield',
        '#title' => 'Address in Cambodia',
        '#default_value' => $adr,
    );
    
    $form['sect_1']['phone'] = array(
        '#type' => 'textfield',
        '#title' => 'Phone Number',
        '#default_value' => $phone,
        '#maxlength' => 10,
    );
    
    $form['sect_2'] = array(
        '#type' => 'fieldset', 
        '#title' => t('Section 2 - Applied Program'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
    );
    
    $form['sect_2']['academic_year'] = array(
        '#type' => 'select',
        '#title' => t('Academic Year'),
        '#options' => array(
           '2017-2018' => t('2017-2018'),
           '2016-2017' => t('2016-2017'),
           '2015-2016' => t('2015-2016'),
        ),
        '#default_value' => $acad_year,
        '#required' => true,
    );
    
    $form['sect_2']['semester'] = array(
        '#type' => 'radios',
        '#title' => 'Semester',
        '#options' => array(1 => 'Semester 1', 2 => 'Semester 2'),
        '#default_value' => $semester,
        '#required' => true,
    );
    
    $form['sect_2']['preference_1'] = array(
        '#type' => 'select',
        '#title' => 'First Preference',
        '#options' => $pref1,
        '#default_value' => $major,
        '#required' => true,
    );
    
    $form['agreement'] = array(
        '#type' => 'checkbox',
        '#title' => 'I agree with university rule and policy.',
        '#required' => true,
    );
    
    if ($nid == 0) {
        $sub_val = 'Submit';
        $func_call = array('submit_info');
    } else {
        $sub_val = 'Update';
        $func_call = array('update_info');
    }
    
    $form['submit_btn'] = array(
        '#type' => 'submit',
        '#value' => $sub_val,
        '#submit' => $func_call,
    );
//    } else {
//        $form = array(
//        '#markup' => 'Hello',
//    );
//    }
    
    return $form;
}

/*
 * Validating registration form
 */
function current_posts_reg_form_validate($form, &$form_state){
    $year_of_birth = $form_state['values']['dob']['year'];
    if ($year_of_birth && ($year_of_birth < 1900 || $year_of_birth > 2000)) {
      form_set_error('year_of_birth', t('Enter a year between 1900 and 2000.'));
    }
    
    $phone = $form_state['values']['phone'];
    if (!empty($phone) && !is_numeric($phone)){
        form_set_error('phone_number', t('Phone number must be number'));
    } elseif (!empty($phone) && is_numeric($phone) && strlen($phone) < 9) {
        form_set_error('phone_number', t('Phone number is not completed'));
    }
}

/*
 * Submitting form
 */
function submit_info($form, &$form_state){
    $_SESSION['form_values']['reg_form'] = $form_state['values'];
    $val = $_SESSION['form_values']['reg_form'];
    debug($val);
    $form_state['redirect'] = 'applicant_info/' . $val['form_build_id'];
}

function update_info($form, &$form_state){
    $_SESSION['form_values']['reg_form'] = $form_state['values'];
    $val = $_SESSION['form_values']['reg_form'];
    debug($val);
    $form_state['redirect'] = 'applicant_info/' . $val['form_build_id'];
}

function current_posts_applicant_info_page() {
    if (!isset($_SESSION)) {
        $dis = array(
        '#markup' => 'Please login.',
    );
    } elseif (empty($_SESSION['form_values'])) {
        header('Location: ../reg_form');
        $dis = array(
        '#markup' => '',
    );
    } else {
//        debug($_SESSION['form_values']);
    $name = $_SESSION['form_values']['reg_form']['reg_name'] . ' ' . $_SESSION['form_values']['reg_form']['reg_family_name'];
    $gender = $_SESSION['form_values']['reg_form']['gender'];
    $bmonth = $_SESSION['form_values']['reg_form']['dob']['month'];
    $bday = $_SESSION['form_values']['reg_form']['dob']['day'];
    $byear = $_SESSION['form_values']['reg_form']['dob']['year'];
    $pob = $_SESSION['form_values']['reg_form']['pob'];
    $address = $_SESSION['form_values']['reg_form']['address'];
    $phone = $_SESSION['form_values']['reg_form']['phone'];
    $acad_year = $_SESSION['form_values']['reg_form']['academic_year'];
    $semester = $_SESSION['form_values']['reg_form']['semester'];
    $major = $_SESSION['form_values']['reg_form']['preference_1'];
    
//    $query = db_query('INSERT INTO `user_info`(`family_name`, `name`, `gender`, `bmonth`, `bday`, `byear`, `pob`, `address`, `phone`, `acad_year`, `semester`, `major_id`) VALUES (\'' 
//            . $_SESSION['form_values']['reg_form']['reg_family_name'] . '\',\''
//            . $_SESSION['form_values']['reg_form']['reg_name'] . '\',\''
//            . $gender . '\',\''
//            . $bmonth . '\',\''
//            . $bday . '\',\''
//            . $byear . '\',\''
//            . $pob . '\',\''
//            . $address . '\',\''
//            . $phone . '\',\''
//            . $acad_year . '\',\''
//            . $semester . '\',\''
//            . $major
//            . '\')');
    
    drupal_set_message('Register complete');
    
    if ($gender == 0){
        $s_gender = 'F';
    } else {
        $s_gender = 'M';
    }
    
    $info = 'nid: ' . $_SESSION['form_values']['reg_form']['nid'] . '<br>'
            . 'Name: ' . $name . '<br>'
            . 'Gender: ' . $s_gender . '<br>'
            . 'Date of Birth: ' . $bmonth . '-' . $bday . '-' . $byear . '<br>'
            . 'Place of Birth: ' . $pob . '<br>'
            . 'Address: ' . $address . '<br>'
            . 'Phone: ' . $phone . '<br>'
            . 'Academic Year: ' . $acad_year . '<br>'
            . 'Semester: ' . $semester . '<br>'
            . 'Major: ' . $_SESSION['form_values']['reg_form']['major'][$major] . '<br>'
            ;
    $dis = array(
        '#markup' => $info,
    );
    }
    return $dis;
}

function current_posts_dept_form($form, &$form_state){
    $form['dept_name'] = array(
        '#type' => 'textfield',
        '#title' => 'Department Name',
        '#maxlength' => 64,
        '#required' => true,
    );
    
    $form['dept_code'] = array(
        '#type' => 'textfield',
        '#title' => 'Department Code',
        '#maxlength' => 4,
        '#required' => true,
    );
    
    $form['dept_submit'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
    );
    
    return $form;
}

function current_posts_dept_form_validate($form, &$form_state){
    
}

function current_posts_dept_form_submit($form, &$form_state){
    $d_name = $form_state['values']['dept_name'];
    $d_code = strtoupper($form_state['values']['dept_code']);
    
    $query = db_query('INSERT INTO `user_info`(`name`, `code`) VALUES (\'' . $d_name . '\',\'' . $d_code . '\')');
    
    drupal_set_message('Department added');
    
//    debug($d_name);
}

function current_posts_update_application_form($form, &$form_state) {
    $form['search'] = array(
        '#type' => 'textfield',
        '#title' => 'Enter applicant name',
        '#required' => true,
    );
    
    $form['bnt_search'] = array(
        '#type' => 'submit',
        '#value' => 'Search',
    );
    
    return $form;
}

function current_posts_update_application_form_validate($form, &$form_state){
    
}

function current_posts_update_application_form_submit($form, &$form_state){
    $query = db_query("SELECT * FROM `user_info` WHERE `name` = '" . $form_state['values']['search'] . "'");
    $records = $query->fetchAssoc();
    
    $_SESSION['u_info'] = $records;
    debug($_SESSION['u_info']);
    $form_state['redirect'] = 'reg_form';
}