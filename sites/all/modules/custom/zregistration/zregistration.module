<?php

/*
 * Implement hook help to provide help description for zregistration custom
 * module.
 */
function zregistration_help($path, $arg){
  switch ($path) {
    case "admin/help#zregistration":
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Z Registration is a module to understand about registration process.') . '</p>';
      return $output;
      break; 
  }
}

/*
 * Implement hook menu to customize quick access menu to module feature
 */
function zregistration_menu() {
    $items = array();
    
    $items['registration'] = array(
        'title' => 'Registered Users',
        'page callback' => 'zregistration_reg_page',
        'access arguments' => array('administer'),
    );
    
    return $items;
}

/*
 * Page callback function to see registered users
 */
function zregistration_reg_page(){
    $query = db_select('users_roles', 'ur')
            ->fields('ur', array('uid'))
            ->execute()
            ->fetchCol();

    $records = user_load_multiple($query);
    
    $header = array(
        array('data' => 'Username', 'field' => 'username'),
        'status' => 'Status',
        'roles' => 'Roles',
        'operations' => 'Operations',
    );
    
    $space = str_repeat('&nbsp', 2);
    $rows = array();
    foreach($records as $user) {
        $status = $user->status;
        if ($status == 1) {
            $str_status = 'active';
        } else {
            $str_status = 'blocked';
        }
        $roles = $user->roles;
        $str_roles = end($roles);
        $rows[$user->uid] = array(
            'username' => l($user->name, 'user/' . $user->uid),
            'status' => $str_status,
            'roles' => $str_roles,
            'operations' =>l('main profile', 'profile-main/' . $user->uid) . $space . l('student profile', 'profile-student_profile/' . $user->uid),
        );
    }
    
    $out = theme('table', array('header' => $header, 'rows' => $rows));
    
    return $out;
}

/*
 * alter form to validate registration courses
 */
function zregistration_form_alter(&$form, &$form_state, $form_id){
    if($form_id == 'profile2_edit_student_profile_form'){
        debug($form['profile_student_profile']
                ['field_registration']['und'][0]['field_reg_courses']['und']
                , 0, 1);
        $form['profile_student_profile']
                ['field_registration']['und'][0]['field_reg_courses']['und']
                ['#element_validate'][] = 'zregistration_courses_validate';
    }
}

function zregistration_courses_validate($form, &$form_state){
    if(1 == 1){
        form_set_error('Test', 'Error test.');
        debug($form_state['input'], 0, 1);
    }
    // the above part investigate which fields to capture value to validate
    // the below part do the validate, the parameter for function is array
    // if the array size is > 1, do the validation, else process updating
    // the validation algo. in the writing book, flip-corner page
}