<?php

/*
 * Implement hook help to provide help description for zregistration custom
 * module.
 */
function zregistration_help($path, $arg){
  switch ($path) {
    case "admin/help#zregistration":
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Z Registration is a module to understand about registration process.') . '</p>';
      return $output;
      break; 
  }
}

/*
 * Implement hook menu to customize quick access menu to module feature
 */
function zregistration_menu() {
    $items = array();
    
    $items['registration'] = array(
        'title' => 'Registered Users',
        'page callback' => 'zregistration_reg_page',
        'access arguments' => array('administer'),
    );
    
    return $items;
}

/*
 * Page callback function to see registered users
 */
function zregistration_reg_page(){
    $query = db_select('users_roles', 'ur')
            ->fields('ur', array('uid'))
            ->condition('rid', 5, '=')
            ->execute()
            ->fetchCol();

    $records = user_load_multiple($query);
    
    $header = array(
        array('data' => 'Username', 'field' => 'username'),
        'status' => 'Status',
        'operations' => 'Operations',
    );
    
    $space = str_repeat('&nbsp', 2);
    $rows = array();
    foreach($records as $user) {
        $status = $user->status;
        if ($status == 1) {
            $str_status = 'active';
        } else {
            $str_status = 'blocked';
        }
        $rows[$user->uid] = array(
            'username' => l($user->name, 'user/' . $user->uid),
            'status' => $str_status,
            'operations' =>l('main profile', 'profile-main/' . $user->uid) . $space . l('student profile', 'profile-student_profile/' . $user->uid),
        );
    }
    
    $out = theme('table', array('header' => $header, 'rows' => $rows));
    
    return $out;
}

/*
 * alter form to validate registration courses
 */
function zregistration_form_alter(&$form, &$form_state, $form_id){
    if($form_id == 'profile2_edit_student_profile_form'){
        $form['profile_student_profile']
                ['field_registration']['und'][0]['field_reg_courses']['und']
                ['#element_validate'][] = 'zregistration_courses_validate';
    }
}

/*
 * This function validate semester in academic year and also registration courses.
 */
function zregistration_courses_validate($form, &$form_state){
    // get registration info section
    $registration_sets = $form_state['input']['profile_student_profile']['field_registration']['und'];
    // check if more than 1 registration set (semester)
    if (sizeof($registration_sets) > 1){
        $match = array(); // store match course(s) from previous semester
        $count_intersect = 0; // count how many semesters that contain previous course(s)
        $courses_error_msg = ''; // initial course(s) error msg, will concatenate when there is/are previous course(s)
        
        // loop through array and get i element to be ready to compare courses
        for($i = 0; $i < sizeof($registration_sets) -1; $i++){
            // loop through arry ang get element after i to compare with element i
            for($j = $i+1; $j < sizeof($registration_sets); $j++){
                // check same acad year and if there is same semester
                if ($registration_sets[$i]['field_reg_academic_year']['und'] == $registration_sets[$j]['field_reg_academic_year']['und']) {
                    if ($registration_sets[$i]['field_reg_semester']['und'] == $registration_sets[$j]['field_reg_semester']['und']){
                        form_set_error('acad_year_semester_error', 'You cannot register to same year and same semester.');
                    }
                }
                
                // check if there are same courses
                $intersect = array_intersect(
                $registration_sets[$i]['field_reg_courses']['und'], 
                $registration_sets[$j]['field_reg_courses']['und']);
                // if there is at least 1 same course
                if (count($intersect) > 0){
                    $match[] = $intersect; // store course id to array
                    $courses_name = taxonomy_term_load_multiple($match[$i]); // load course name from array
                    $count_intersect += 1; // increase number of semester that contain previous course by one
                    // loop to build error msg
                    foreach($courses_name as $name){
                        $courses_error_msg .= $name->name . ' is already taken in previous semester.<br>';
                    }
                }
            }
        }
        // if there is at least 1 semester contain retake course, display msg
        if($count_intersect > 0){
            form_set_error('retake_courses_error', $courses_error_msg);
        }
    }
}